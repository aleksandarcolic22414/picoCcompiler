package main;

import antlr.picoCLexer;
import antlr.picoCParser;
import antlr.TranslationVisitor;
import antlr.TranslationListener;
import compilationControlers.Writers;
import constants.Constants;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStream;
import java.util.logging.Level;
import java.util.logging.Logger;
import org.antlr.v4.runtime.ANTLRInputStream;
import org.antlr.v4.runtime.CommonTokenStream;
import org.antlr.v4.runtime.tree.ParseTree;
import org.antlr.v4.runtime.tree.ParseTreeWalker;

/**
 *
 * @author Aleksandar Colic
 */
public class Main 
{
  
    /* Path to current directory */
    public static String dir;
    
    public static void main(String[] args) throws IOException, InterruptedException 
    {
        if (args.length > 0) {
            dir = System.getProperty("user.dir");
            Constants.PATH_TO_INPUT_FILE = dir + "//" + args[0];
            Constants.PATH_TO_OUTPUT_FILE = dir + "//out.asm";
            Writers.init();
        } else {
            System.err.println("No input files specified.");
            return;
        }
        
        try {
            InputStream is = new FileInputStream(Writers.inputFile);
            ANTLRInputStream in = new ANTLRInputStream(is);
            picoCLexer lexer = new picoCLexer(in);
            CommonTokenStream tokens = new CommonTokenStream(lexer);
            picoCParser parser = new picoCParser(tokens);
            ParseTree tree = parser.compilationUnit();
                        
            ParseTreeWalker walker = new ParseTreeWalker();
            TranslationListener listener = new TranslationListener();
            TranslationVisitor visitor = new TranslationVisitor();
            
            walker.walk(listener, tree);
            visitor.visit(tree);
            
        } catch (FileNotFoundException ex) {
            Logger.getLogger(Main.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(Main.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        Main.assembleAndLink();
    }

    /* Function assembles file generated by compiler and links object files
        with gcc's linker    . */
    private static void assembleAndLink() 
    {
        try {
            File pathToDirectory = new File(dir);
            String nasm = "nasm -f elf64 -o out.o out.asm";
            String gcc = "gcc -m64 -o run out.o";
            String clean = "rm out.o out.asm";
            Runtime runtime = Runtime.getRuntime();
            Process p = runtime.exec(nasm, null, pathToDirectory);
            p.waitFor();
            p = runtime.exec(gcc, null, pathToDirectory);
            p.waitFor();
            runtime.exec(clean, null, pathToDirectory);
        } catch (IOException ex) {
            Logger.getLogger(Main.class.getName()).log(Level.SEVERE, null, ex);
        } catch (InterruptedException ex) {
            Logger.getLogger(Main.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    
}
